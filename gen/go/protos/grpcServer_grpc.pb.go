// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: protos/grpcServer.proto

package buf_

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceNameClient is the client API for ServiceName service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceNameClient interface {
	GenerateShortLink(ctx context.Context, in *RequestLink, opts ...grpc.CallOption) (*ResponseLink, error)
	GetOriginalLink(ctx context.Context, in *RequestLink, opts ...grpc.CallOption) (*ResponseLink, error)
}

type serviceNameClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceNameClient(cc grpc.ClientConnInterface) ServiceNameClient {
	return &serviceNameClient{cc}
}

func (c *serviceNameClient) GenerateShortLink(ctx context.Context, in *RequestLink, opts ...grpc.CallOption) (*ResponseLink, error) {
	out := new(ResponseLink)
	err := c.cc.Invoke(ctx, "/grpcHandlers.ServiceName/GenerateShortLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceNameClient) GetOriginalLink(ctx context.Context, in *RequestLink, opts ...grpc.CallOption) (*ResponseLink, error) {
	out := new(ResponseLink)
	err := c.cc.Invoke(ctx, "/grpcHandlers.ServiceName/GetOriginalLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceNameServer is the server API for ServiceName service.
// All implementations must embed UnimplementedServiceNameServer
// for forward compatibility
type ServiceNameServer interface {
	GenerateShortLink(context.Context, *RequestLink) (*ResponseLink, error)
	GetOriginalLink(context.Context, *RequestLink) (*ResponseLink, error)
	mustEmbedUnimplementedServiceNameServer()
}

// UnimplementedServiceNameServer must be embedded to have forward compatible implementations.
type UnimplementedServiceNameServer struct {
}

func (UnimplementedServiceNameServer) GenerateShortLink(context.Context, *RequestLink) (*ResponseLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateShortLink not implemented")
}
func (UnimplementedServiceNameServer) GetOriginalLink(context.Context, *RequestLink) (*ResponseLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginalLink not implemented")
}
func (UnimplementedServiceNameServer) mustEmbedUnimplementedServiceNameServer() {}

// UnsafeServiceNameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceNameServer will
// result in compilation errors.
type UnsafeServiceNameServer interface {
	mustEmbedUnimplementedServiceNameServer()
}

func RegisterServiceNameServer(s grpc.ServiceRegistrar, srv ServiceNameServer) {
	s.RegisterService(&ServiceName_ServiceDesc, srv)
}

func _ServiceName_GenerateShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameServer).GenerateShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcHandlers.ServiceName/GenerateShortLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameServer).GenerateShortLink(ctx, req.(*RequestLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceName_GetOriginalLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameServer).GetOriginalLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcHandlers.ServiceName/GetOriginalLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameServer).GetOriginalLink(ctx, req.(*RequestLink))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceName_ServiceDesc is the grpc.ServiceDesc for ServiceName service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceName_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcHandlers.ServiceName",
	HandlerType: (*ServiceNameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateShortLink",
			Handler:    _ServiceName_GenerateShortLink_Handler,
		},
		{
			MethodName: "GetOriginalLink",
			Handler:    _ServiceName_GetOriginalLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/grpcServer.proto",
}
